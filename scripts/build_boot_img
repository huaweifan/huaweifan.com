############################################################################
#
# 版权所有 (c) 2010-2011 dsixda - 由华为饭网的饭吗汉化 bbs.huaweifan.com
#
# Android 厨房是一款ROM定制工具，它完全是免费的。 
# 理论上支持所有民间刷机包的定制，完美支持华为和HTC的所有民间和官方刷机包！ 
# 该脚本文件的目的是为个人和/或教育使用，不得将它用于任务商业用途。
# 
# 技术支持来自XDA和华为手机论坛，华为手机论坛网址是：bbs.huaweifan.com
#
############################################################################

#
# This script has three optional parameters:
#
# $1 = page size / kernel offset in boot.img (in decimal)
# $2 = kernel base offset (in hexadecimal, e.g. 0x200000; needs $1 defined)
# $3 = command line (needs $1 and $2 defined)
#

echo

if [ -d BOOT-EXTRACTED ]
then
  echo 已找到 BOOT-EXTRACTED 文件夹，正在检查相关内容 ...

  if [ -d BOOT-EXTRACTED/boot.img-ramdisk ]
  then
    echo 已找到 boot.img-ramdisk

    if [ -e BOOT-EXTRACTED/zImage ]
    then
      echo 已找到 zImage
    else
      echo 无法已找到 BOOT-EXTRACTED/zImage
      exit 0
    fi

  else
    echo 无法已找到 boot-extracted/boot.img-ramdisk 文件夹！
    exit 0
  fi

else
  echo 无法已找到 BOOT-EXTRACTED 文件夹！
  exit 0
fi


if [ -d WORKING_* ]
then
  echo 已经找到ROM定制文件夹 WORKING_*！
else
  echo 没有找到ROM定制文件夹 WORKING_*！
  exit 0
fi



if [ "$1" == "" ]
then

  #
  # Determine the kernel offset to be used in the new boot.img, 
  # based on the current boot.img or /boot folder.
  #

  cd WORKING_*

  if [ -e boot.img ] 
  then
   
    cd ..
    scripts/check_kernel_offset
    res=$?

    if [ "$res" != "0" ]
    then
      exit 0
    fi
    

  else

    if [ ! -e boot/initrd.gz ] || [ ! -e boot/zImage ]
    then
      echo "在ROM定制文件夹 WORKING_* 没有找到 boot.img "
      cd ..
      exit 0
    else

      # Using a fake base address and command line to create the boot.img, since
      # we don't have a boot.img and are using the NAND method; boot.img won't 
      # be in final NAND ROM.

      base=0x11800000     
      cmd_line="dsixda NAND"

      cd ..
    fi
  fi

else

  #
  # Using hard-coded values 
  #

  scripts/set_kernel_offset_files $1

  if [ "$2" != "" ]
  then
    base=$2
    
    if [ "$3" != "" ]
    then
      cmd_line=$3
    fi
  fi

fi



#
# Compile mkboot*
#

mkbootimg_src=mkbootimg.c
mkbootimg_out=mkbootimg

if [ `uname | grep CYGWIN` ]
then
  mkbootfs_file=mkbootfs.exe
  mkbootimg_file=$mkbootimg_out.exe
else
  mkbootfs_file=mkbootfs
  mkbootimg_file=$mkbootimg_out
fi


if [ -e tools/mkboot/$mkbootfs_file ]
then
  echo "已找到 $mkbootfs_file"
else
  echo
  echo "正在编译 mkbootfs ..."
  cd tools/mkboot
  gcc -o mkbootfs mkbootfs.c
  cd ../..

  if [ -e tools/mkboot/$mkbootfs_file ]
  then
    echo mkbootfs 已经编译成功！
  else
    echo "错误: mkbootfs 没有编译成功！"
    exit 0   
  fi
fi


if [ -e tools/mkboot/$mkbootimg_file ]
then
  rm -f $mkbootimg_file
fi

echo
echo "正在编译 mkbootimg ..."
cd tools/mkboot
gcc -c rsa.c
gcc -c sha.c
gcc rsa.o sha.o $mkbootimg_src -w -o $mkbootimg_out
rm *.o
cd ../..

if [ -e tools/mkboot/$mkbootimg_file ]
then
  echo "$mkbootimg_out 已经编译成功！"
else
  echo "错误: $mkbootimg_out 没有编译成功！"
  exit 0
fi    


cp tools/mkboot/$mkbootfs_file BOOT-EXTRACTED/
cp tools/mkboot/$mkbootimg_file BOOT-EXTRACTED/
cd BOOT-EXTRACTED


#
# Run mkbootfs
#

echo 
echo "正在创建 ramdisk cpio 文档 ..."
./$mkbootfs_file boot.img-ramdisk | gzip > ramdisk.gz




cd ..
cd WORKING_*

if [ -e boot.img ]
then

  cd ..
  echo

  #
  # Get original size of boot.img
  #
  size_orig=`scripts/get_boot_img_size`


  #
  # Determine kernel base address before running mkbootimg
  #

  if [ "$base" == "" ]
  then
    echo "正在试图确定内核的基本地址..."
    base=`scripts/get_kernel_base_addr`
  fi

  echo "正在使用 $base 的基本地址 ..."

  #
  # If no parameters entered, then find out the command line
  #
  # NOTE: Check the first two parameters to determine whether the user set the
  # command line to an empty string intentionally
  #
  if [ "$3" == "" ]  && [ "$1" == "" ]
  then
    echo "正在试图确定命令代码参数..."
    cmd_line=`scripts/get_cmdline`
  fi

  if [ "$cmd_line" == "" ]
  then
    echo "没有找到命令行"
  else
    echo "正在使用内核命令行：$cmd_line"
  fi    

else
  cd ..
fi  


#
# Run mkbootimg
#

cd BOOT-EXTRACTED

echo
echo "正在创建新的 boot.img ..."

if [ "$cmd_line" == "" ]
then
  ./$mkbootimg_file --kernel zImage --ramdisk ramdisk.gz -o newBoot.img --base $base
else
  ./$mkbootimg_file --kernel zImage --ramdisk ramdisk.gz --cmdline "$cmd_line" -o newBoot.img --base $base
fi

if [ -e newBoot.img ]
then
  echo
  echo "newBoot.img 已经创建"

  echo "正在移动到ROM定制文件夹作为 boot.img"
  cd ../WORKING_*
  mv -f ../BOOT-EXTRACTED/newBoot.img boot.img

  if [ "$size_orig" != "" ]
  then

    #
    # Get new size of boot.img
    #
    cd ..
    size_new=`scripts/get_boot_img_size`
    cd WORKING_*

    if [ "$size_new" != "" ]
    then
      echo
      echo "boot.img size"
      echo "旧的：$size_orig"
      echo "新的：$size_new"
    fi
  fi

  if [ -d boot ] && [ -e boot/initrd.gz ] && [ -e boot/zImage ]
  then
    echo
    echo "正在删除 NAND 引导文件夹 ..."
    rm -rf boot
  fi

  cd ..
    
  echo
  echo "R正在删除 BOOT-EXTRACTED 文件夹 ..."
  rm -rf BOOT-EXTRACTED
  
  exit_code=1

else
  echo
  echo "newBoot.img 未能创建！"

  rm $mkbootfs_file
  rm $mkbootimg_file

  cd ..
  exit_code=0
fi

exit $exit_code
