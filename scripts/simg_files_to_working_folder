############################################################################
#
# 版权所有 (c) 2010-2011 dsixda - 由华为饭网的饭吗汉化 bbs.huaweifan.com
#
# Android 厨房是一款ROM定制工具，它完全是免费的。 
# 理论上支持所有民间刷机包的定制，完美支持华为和HTC的所有民间和官方刷机包！ 
# 该脚本文件的目的是为个人和/或教育使用，不得将它用于任务商业用途。
# 
# 技术支持来自XDA和华为手机论坛，华为手机论坛网址是：bbs.huaweifan.com
#
############################################################################

#
# This script has two optional arguments:
#
# $1 = "no_create" or "create" or "create_working 
#         - must specify no_create if working folder already exists
# $2 = "kernel_only" or "name_given" - if this is specified then $1 is mandatory
#

if [ "$1" == "no_create" ] 
then
  build_dir=`ls | grep -m 1 ^WORKING_`

  if [ ! -e $build_dir/factoryfs.img ]
  then
    echo "错误：$build_dir/factoryfs.img 没有找到"
    exit 1
  fi

  mkdir $build_dir/system
  mv $build_dir/factoryfs.img $build_dir/system

  if [ -e $build_dir/cache.img ]
  then
    mv $build_dir/cache.img $build_dir/system
  else
    echo
    echo "警告：没有发现cache.img。"
    echo "您可以使用ROM定制工具的高级菜单中的插件脚本解包cache.img 。"
    echo
  fi

  # Sometimes images have zero permissions set when extracted from TAR archive,
  # making them unreadable!
  chmod -R 777 $build_dir

else

  #
  # Check for factoryfs.img, cache.img and zImage in original_update  
  #
  if [ -e original_update/factoryfs.img ]
  then
    echo "已找到 original_update/factoryfs.img"

    if [ -e original_update/cache.img ]
    then
      echo "已找到 original_update/cache.img"
    else
      echo
      echo "警告：没有发现 original_update/cache.img 。"
      echo "您可以使用ROM定制工具的高级菜单中的插件脚本解包cache.img 。"
      echo
    fi
  else

    if [ -e original_update/cache.img ]
    then
      echo "已找到 original_update/cache.img"
      echo "错误：original_update/factoryfs.img 没有找到"
    else
      echo
      echo "错误：在 original_update 文件夹下没有找到 ROM ！"
    fi

    exit 1
  fi

  if [ -e original_update/zImage ]
  then
    echo "已找到 original_update/zImage"
    scripts/show_rooted_kernel_msg
  else
    echo "错误：没有找到 original_update/zImage ！"
  fi


  #
  # Working folder name
  #
  build_dir=`scripts/set_working_folder_name $2`

  echo
  echo "正在创建ROM定制文件夹 $build_dir ..."
  mkdir $build_dir
  mkdir $build_dir/system

  # Kernel is optional
  if [ -e original_update/zImage ]
  then
    echo 正在复制 zImage ...
    cp original_update/zImage $build_dir
  fi

fi

echo


#
# Compile sigm2img
#

simg2img_file=simg2img
if [ `uname | grep CYGWIN` ]
then
  simg2img_file=$simg2img_file.exe
fi

if [ -e tools/samsung_files/simg2img_files/$simg2img_file ]
then
  echo "已找到 $simg2img_file"
else
  echo "正在编译 simg2img ..."

  cd tools/samsung_files/simg2img_files
  gcc -c sparse_crc32.c
  gcc sparse_crc32.o simg2img.c -w -o simg2img
  rm *.o 
  cd ../../..

  if [ -e tools/samsung_files/simg2img_files/$simg2img_file ]
  then
    echo "$simg2img_file 成功编译"
  else
    echo "错误：$simg2img_file 不能成功编译！"
    exit 1
  fi    
fi




if [ "$1" == "no_create" ]
then
  src_dir=$build_dir/system
else
  src_dir=original_update
fi

system_dir=$build_dir/system
cd $system_dir

# Get full path
system_dir=`pwd`
cd ../..


#
# Convert factoryfs.img to ext4
#

echo
echo "正在解包 factoryfs.img 成 ext4 格式 ..."
tools/samsung_files/simg2img_files/simg2img $src_dir/factoryfs.img \
  $system_dir/ext4_factoryfs.img

if [ ! -e $system_dir/ext4_factoryfs.img ]
then
  echo "无法解包 factoryfs.img!"
  exit 1
fi

rm -rf $system_dir/factoryfs.img



#
# Directory tree
#

mkdir -p $build_dir/META-INF/com/google/android
echo
echo "正在添加 update-script 刷机脚本 ..."
cp tools/update_files/update-script $build_dir/META-INF/com/google/android/



#
# Extract files from ext4_factoryfs.img
#

if [ `uname | grep CYGWIN` ]
then
  scripts/show_ext2explore $system_dir ext4_factoryfs.img
else
  scripts/extract_ext3_img $system_dir ext4_factoryfs.img
fi

cd $system_dir

rm -f ext4_factoryfs.img 2>/dev/null
if [ "$?" == "1" ]
then
  echo
  echo "警告：ext4_factoryfs.img正在使用中。应用程序关闭后，手动删除文件。"
  echo
fi

cd ..

if [ ! -d system ]
then
  echo
  echo "错误： /system 文件夹没有找到！"
  exit 1
fi

if [ ! -d system/framework ]
then
  echo
  echo "错误： /system/framework 文件夹没有找到！"
  exit 1
fi

if [ ! -d system/app ]
then
  echo
  echo "错误： /system/app 文件夹没有找到！"
  exit 1
fi

if [ "`ls system`" == "" ]
then
  echo 
  echo "错误： /system 文件夹是空的！"
  echo
  exit 1
fi


cd ..

echo
echo "文件ext4_factoryfs.img已经完全解包到："
echo "  $system_dir"


if [ -e $src_dir/cache.img ]
then
  echo
  echo "你是否要解包客户定制软件（CSC）"
  echo -n "从 cache.img (y/n)? (默认: y): "

  read do_extract
  echo

  if [ "$do_extract" == "n" ]
  then
    rm -vf $src_dir/cache.img
    echo
  else

    #
    # Convert cache.img to ext4
    #
    echo "正在解包  cache.img 成 ext4 格式 ..."
    tools/samsung_files/simg2img_files/simg2img $src_dir/cache.img \
      $system_dir/ext4_cache.img

    if [ ! -e $system_dir/ext4_cache.img ]
    then
      echo "无法解包 cache.img!"
      exit 1
    fi

    rm -rf $system_dir/cache.img


    #
    # Extract files from ext4_cache.img
    #
    if [ `uname | grep CYGWIN` ]
    then
      scripts/show_linux_reader $system_dir ext4_cache.img
    else
      scripts/extract_ext3_img $system_dir ext4_cache.img
    fi

    cd $system_dir 

    rm -f ext4_cache.img 2>/dev/null
    if [ "$?" == "1" ]
    then
      echo
      echo "警告：ext4_cache.img正在使用中。应用程序关闭后，请手动删除文件。"
      echo
    fi

    if [ ! -e sec_csc.zip ]
    then
      echo "警告： sec_csc.zip 没有找到！"
    else
      echo "正在从 sec_csc.zip 解压所需的文件 ..."
      unzip -q sec_csc.zip -d temp_csc

      # 
      # Carrier bloatware
      #

      if [ -d temp_csc/system/app ]
      then
        echo
        echo "从 sec_csc.zip 发现这些应用程序 ："
        ls temp_csc/system/app
        echo
        echo -n "是否复制应用程序到ROM定制件夹 (y/n)? (默认: n): "

        read do_copy
        echo

        if [ "$do_copy" != "y" ]
        then
          rm -vrf temp_csc/system/app
        fi
      fi

      rm -rf temp_csc/META-INF
      cp -rf temp_csc/system/* .
      rm -rf temp_csc
    fi

    rm -f sec_csc.zip 2>/dev/null
    if [ "$?" == "1" ]
    then
      echo
      echo "警告：sec_csc.zip正在使用中。请手动删除文件。"
      echo
    fi

    cd ../..

  fi
fi



#
# Insert fake boot.img
#
scripts/check_no_bootimg


#
# update-script and other adjustments
#
if [ "$2" != "kernel_only" ] && [ "$2" != "name_given" ]
then
  scripts/fix_update_script 

  # Modify the update-script with features found in Nandroid backup
  scripts/fix_update_script_with_features

  scripts/remove_recovery
fi


echo
echo Listing of $build_dir:
echo
ls -l $build_dir

echo
echo "ROM定制文件夹创建完成！"

