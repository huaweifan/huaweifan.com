############################################################################
#
# 版权所有 (c) 2010-2011 dsixda - 由华为饭网的饭吗汉化 bbs.huaweifan.com
#
# Android 厨房是一款ROM定制工具，它完全是免费的。 
# 理论上支持所有民间刷机包的定制，完美支持华为和HTC的所有民间和官方刷机包！ 
# 该脚本文件的目的是为个人和/或教育使用，不得将它用于任务商业用途。
# 
# 技术支持来自XDA和华为手机论坛，华为手机论坛网址是：bbs.huaweifan.com
#
############################################################################


clear
echo

if [ -d WORKING_* ]
then
  echo 已经找到ROM定制文件夹！
else
  echo 错误：没有找到ROM定制文件夹！
  exit 0
fi

cd WORKING_*

if [ -e META-INF/com/google/android/update-script ] && [ -e META-INF/com/google/android/updater-script ]
then

  echo
  echo "错误：ROM定制文件夹中检测到两个 update-script 和 updater-script 。" 
  echo "        请在制作ROM前确保只有一个刷机脚本文件!" 
  echo

  cd ..
  exit 0
fi



echo
echo "清除所有临时及残留文件中 ..."
echo

rm -f *.zip
rm -f testkey.*
rm -f signapk.jar
rm -f signed*.zip
rm -f *smali.jar

#
# Clean up *.DS_Store hidden files
#
find . -name '*.DS_Store' -type f -delete

#
# Clean up stackdump files
#
find . -name sh.exe.stackdump -type f -delete


#
# Clean up temp files left behind by interrupted Amend/Edify conversion scripts
#
find META-INF/com/google/android/ -name 'sed*' -type f -delete


#
# Clean up strange temp file issue in root of working folder
#

file_list=`find . -maxdepth 1 -type f`

for filename in $file_list
do

  filename=`echo $filename | sed 's/\.\///g'`
  header_bytes=`od -A n -H -j 0 -N 4 $filename | sed 's/ //g'`

  if [ "$header_bytes" == "04034b50" ]
  then
    echo -n "已在文件夹中找到文件: $filename. 删除 (y/n)? (默认: y): "
    read delete_file

    if [ "$delete_file" != "n" ]
    then
      echo "正在删除 $filename"
      rm -f $filename
    else
      echo "正在保留 $filename"
    fi
  fi
done


cd ..
scripts/prompt_nand_type
cd WORKING_*


echo
echo `pwd`
echo
ls -lrt
cd ..
echo


scripts/fix_pre_build
cmd_line=`scripts/get_cmdline`

extreme=no
express=no
interactive=no

echo
echo "=========================================================================="
echo
echo "选择一个制作选项："
echo
echo "  1 = 交互模式 - 对于大多数用户推荐"
echo "      （制作过程中进行指导操作）"
echo
echo "  2 = 快速模式 - 仅限高级用户"
echo "      （自动执行Zipalign和Edify操作, 不对ROM进行签名操作, 自动命名ZIP文件）"
echo 
echo "  3 = 极端模式 - 仅限高级用户"
echo "      （不自动执行zipalign操作, 没有刷机脚本转换, 不对ROM进行签名操作, 自动命名ZIP文件）"
echo 
echo "  4 = 取消 - 暂时不要制作刷机包"
echo
echo "=========================================================================="
echo
echo -n "请输入选择项（默认值：1）："

read build_mode

# Default is 1, so remember to account for Enter key
if [ "$build_mode" == "4" ]
then
  echo "已经取消操作"
  exit 0
elif [ "$build_mode" == "3" ]
then
  extreme=yes  
elif [ "$build_mode" == "2" ]
then
  express=yes 
else
  interactive=yes
fi


if [ "$extreme" == "no" ]
then
  scripts/do_zipalign for_build $express
fi

if [ "$?" == "1" ]
then
  echo "正在取消制作中 ..."
  exit 0
fi

cd WORKING_*

#
# Create update.zip
#
echo
echo 正在制作 update.zip ...

if [ "$cmd_line" == "dsixda Null" ]
then
  zip -r -y -q update * -x *.cvs* *.git* *.svn* \
      *updater-script.orig* *update-binary.orig* *update-script.orig* \
      boot.img 
else
  zip -r -y -q update * -x *.cvs* *.git* *.svn* \
      *updater-script.orig* *update-binary.orig* *update-script.orig* 
fi      

echo

if [ -e update.zip ]
then
  echo update.zip 已经制作完成！ 
  echo
else
  echo "错误: update.zip 没有制作成功！"
  cd ..
  exit 0
fi


#
# Convert update-script (Amend) to updater-script (Edify) in the ZIP file only
#

if [ "$extreme" == "no" ] && [ -e META-INF/com/google/android/update-script ]
then
 
  cd ..
  scripts/update_script_should_convert_back
  auto_convert="$?"
  cd WORKING_*
  
  if [ "$auto_convert" == "1" ] || [ "$express" == "yes" ]
  then 
    convert_it=y
  else
    echo
    echo "--------------------------------------------------------------------------"
    echo 
    echo " 在ROM定制文件夹中检测到 update-script 刷机脚本！"
    echo
    echo " 为确保新版 Recovery （3.X以后）的兼容性，"
    echo " 你必须使用一个新版的刷机脚本（updater-script (Edify)），"
    echo " 而不是使用 update-script（Amend）旧版脚本。"
    echo 
    echo " 您的ROM定制文件夹中仍然继续保持旧版 update-script 刷机脚本！ "
    echo 
    echo -n " 是否继续添加 updater-script 到 ROM (y/n)? (默认: n): "
    read convert_it
  fi

  if [ "$convert_it" == "y" ]
  then

    cd ..
    scripts/convert_update_script for_zip $express

    if [ "$?" != "1" ]
    then

      cd WORKING_*

      if [ "$express" == "yes" ]
      then
        proceed_change=y
      else
        echo "保留更改并继续 (y/n)?"
        echo 
        echo "  y = 继续：添加 updater-script 和 update-binary 脚本文件到 ZIP 文件中;"
        echo "      ZIP文件中的刷机脚本update-script将被删除，但将继续留在ROM定制文件夹。"
        echo "  n = 取消： updater-script 和 update-binary 将被删除，而不使用。"
        echo
         
        echo -n "? (默认: y): "
        read proceed_change 
      fi

      echo

      if [ "$proceed_change" != "n" ]
      then

        if [ -e META-INF/com/google/android/updater-script ]
        then
          zip update.zip META-INF/com/google/android/updater-script META-INF/com/google/android/update-binary
          zip -d update.zip META-INF/com/google/android/update-script
        else
          echo "updater-script 没有找到, 保留 update-script"
        fi

      else
        echo
        echo "正在取消中 ..."
      fi

      rm -f META-INF/com/google/android/updater-script
      rm -f META-INF/com/google/android/update-binary

      if [ "$auto_convert" == "1" ] && [ "$proceed_change" == "n" ]
      then
        echo "你的 ROM 文件不适用此 update-script脚本文件！"
        echo "正在删除 update.zip ..."
        rm -f update.zip
        echo
        cd ..
        exit 0
      fi

    else
      echo "正在保留 update-script 脚本文件 ..."
      cd WORKING_*
    fi

  else
    echo
    echo
    echo "正在保留 update-script 脚本文件 ..."
  fi

  echo

else

  #
  # For Extreme mode
  #

  if [ -e META-INF/com/google/android/update-script ]
  then
    echo "找到 update-script (Amend) 脚本文件"
  fi
  
  if [ -e META-INF/com/google/android/updater-script ]
  then
    echo "找到 updater-script (Edify) 脚本文件"
  fi

  echo
fi



#
# Sign update.zip if necessary
#

date_str=`date '+%m%d%y_%H%M%S'`

cd ..
device=`scripts/get_device_name | sed 's/ /_/g'`
cd WORKING_*


sign_update=no
sign_str=unsigned

if [ "$interactive" == "yes" ]
then
  echo
  echo "建议为你的ROM文件进行签名操作！"
  echo -n "是否签名它 (y/n)? (默认: y): "
  read do_sign

  if [ "$do_sign" != "n" ]
  then
    sign_update=yes
    sign_str=signed
  fi
fi

final_file=$device\_$sign_str\_$date_str.zip


if [ "$sign_update" == "no" ]
then
  mv update.zip $final_file
  res=$?

else
  echo
  echo 正在签名 update.zip ...

  cp ../tools/signapk_files/testkey.* .
  cp ../tools/signapk_files/signapk.jar .

  java -jar signapk.jar testkey.x509.pem testkey.pk8 update.zip $final_file
  res=$?

  rm -f testkey.*
  rm -f signapk.jar
  rm -f update.zip
fi


if [ -e $final_file ] && [ "$res" == "0" ]
then

  #
  # Rename zip
  #
  if [ "$interactive" == "yes" ]
  then
    cd ..
    final_file2=`scripts/set_update_name $final_file`
    cd WORKING_*
    if [ "$final_file2" != "$final_file" ]
    then
      mv -fv $final_file $final_file2
      final_file=$final_file2
    fi
  fi

  echo

  #
  # Make output folder
  #
  if [ -d ../OUTPUT_ZIP ]
  then
    echo "已经找到 OUTPUT_ZIP 文件夹" 
  else
    echo "正在建立 OUTPUT_ZIP 文件夹 ..."
    mkdir ../OUTPUT_ZIP
  fi

  mv $final_file ../OUTPUT_ZIP/

  echo
  echo
  echo
  echo "=========================================================================="
  echo
  echo "恭喜你... ...这里是你的ROM："
  echo
  echo "----> OUTPUT_ZIP/$final_file" 
  echo
  echo "将此文件复制到您的设备中，然后进入Recovery菜单操作将RIM刷入手机。"
  echo

  echo "如有必要，请先执行wipe操作！"
  echo
  echo "如果你的ROM不能启动，请参阅常见问题故障排除。"

  if [ "$sign_update" == "no" ]
  then
    echo
    echo "请注意：您将需要在Recovery菜单中禁用签名检查来刷入这个ROM！"
    echo "如果你想以后签名这个ROM，请使用在ROM定制工具的高级菜单中签名ZIP选项。"
    echo "如有问题请登录：http://bbs.huaweifan.com 咨讯～！"
  fi

  echo

else 

  echo
  echo "不能创建 $final_file！"
  echo

  if [ "$sign_update" == "yes" ]
  then
    if [ `uname | grep Linux` ] 
    then
      echo "确保你有一个最新版本的Sun Java JDK"
    
    elif [ `uname | grep CYGWIN` ]
    then
      echo "确保您已在电脑上安装的Sun Java JDK。" 
      echo
      echo "如果您已经有JDK，那么也许java.exe的路径是不正确定义："
      echo 
      echo "e.g.  In $HOME/.bash_profile, add to the end:"
      echo "      PATH=/cygdrive/c/Program\ Files/Java/jdk1.6.0_18/bin:\${PATH}" 
      echo 
      echo "      以上就是一个例子。你的路径可能会有所不同。"

    elif [ `sw_vers | grep -o Mac` ]
    then
      echo "您可能需要安装用于Mac OS X SoyLatte（取代标准的Java JDK）"
    fi
  fi
fi

cd ..

# System beep
echo 

